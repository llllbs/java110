package bitcamp.java110.cms.dao.impl;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import bitcamp.java110.cms.annotation.Autowired;
import bitcamp.java110.cms.annotation.Component;
import bitcamp.java110.cms.dao.DaoException;
import bitcamp.java110.cms.dao.ManagerDao;
import bitcamp.java110.cms.domain.Manager;
import bitcamp.java110.cms.util.DataSource;

@Component
public class ManagerMysqlDao implements ManagerDao {
    
    DataSource datasource;
    // 커넥션을 관리해 주는 것
   
    @Autowired
    public void setDatasource(DataSource datasource) {
        this.datasource = datasource;
    }

    public int insert(Manager manager) {
        Statement stmt = null; 
        Connection con = null;

        try {

            con = datasource.getConnection();
            con.setAutoCommit(false);

            stmt = con.createStatement();
            String sql = "insert into p1_memb(name,email,pwd,tel,cdt)"
                    + " values('" + manager.getName()
                    + "','" + manager.getEmail()
                    + "',password('" + manager.getPassword()
                    + "'),'" + manager.getTel()
                    + "',now())";

           
            stmt.executeUpdate(sql, Statement.RETURN_GENERATED_KEYS);

            ResultSet autogeneratedKeys = stmt.getGeneratedKeys();
            autogeneratedKeys.next();
            int memberNo = autogeneratedKeys.getInt(1);
            autogeneratedKeys.close();

            String sql2 = "insert into p1_mgr(mrno,posi)"
                    + " values(" + memberNo
                    + ",'" + manager.getPosition()
                    + "')";
            stmt.executeUpdate(sql2);

            con.commit();
            return 1;
            
        } catch (Exception e) {
            try {con.rollback();} catch (Exception e2) {}
            // close하면 자동 롤백이 되는데, close를 하지 않아서 명시해 주어야 한다
            // 한개의 sql문만 들어가고 두번째 sql문이 실행이안되서 오류가났을 때 첫번째 sql문이 적용된것을 취소시키기위해(commit되는 것을)
            // tempdatabase에 들어 있는 것을 지워라! -> rollback
            throw new DaoException(e);
            

        } finally {
            try {stmt.close();} catch (Exception e) {}
            // 쓰고나면 무조건 닫아줘야 한다
            // 커넥션은 다른 메소드가 사용해야 하기 때문에 닫지 않는다
        }
    }

    public List<Manager> findAll() {

        ArrayList<Manager> list = new ArrayList<>();

        Connection con = null;
        Statement stmt = null;
        ResultSet rs = null;

        try {
            con = datasource.getConnection();

            stmt = con.createStatement();        
            rs = stmt.executeQuery(
                    "select" + 
                            " m.mno," +
                            " m.name," + 
                            " m.email," + 
                            " mr.posi" + 
                            " from p1_mgr mr" + 
                    " inner join p1_memb m on mr.mrno = m.mno");


            while (rs.next()) {
                Manager mgr = new Manager();
                mgr.setNo(rs.getInt("mno"));
                mgr.setEmail(rs.getString("email"));
                mgr.setName(rs.getString("name"));
                mgr.setPosition(rs.getString("posi"));

                list.add(mgr);
            }
        } catch (Exception e) {
            throw new DaoException(e);
        } finally {
            try {rs.close();} catch (Exception e) {}
         // resultSet은 select할때만 필요하다
            try {stmt.close();} catch (Exception e) {}
        }
        return list;
    }

    public Manager findByEmail(String email) {
        Connection con = null;
        Statement stmt = null;
        ResultSet rs = null;

        try {
            con = datasource.getConnection();

            stmt = con.createStatement();
            rs = stmt.executeQuery(
                    "select" + 
                            " m.mno," +
                            " m.name," + 
                            " m.email," + 
                            " m.tel," + 
                            " mr.posi" + 
                            " from p1_mgr mr" + 
                            " inner join p1_memb m on mr.mrno = m.mno" +
                            " where m.email='" + email + "'");

            if (rs.next()) {
                Manager mgr = new Manager();
                mgr.setNo(rs.getInt("mno"));
                mgr.setEmail(rs.getString("email"));
                mgr.setName(rs.getString("name"));
                mgr.setTel(rs.getString("tel"));
                mgr.setPosition(rs.getString("posi"));

                return mgr;
            }
            return null;

        } catch (Exception e) {
            throw new DaoException(e);

        } finally {
            try {rs.close();} catch (Exception e) {}
            try {stmt.close();} catch (Exception e) {}
        }
    }

    public Manager findByNo(int no) {
        Connection con = null;
        Statement stmt = null;
        ResultSet rs = null;

        try {
            
            con = datasource.getConnection();

            stmt = con.createStatement();
            rs = stmt.executeQuery(
                    "select" + 
                            " m.mno," +
                            " m.name," + 
                            " m.email," + 
                            " m.tel," + 
                            " mr.posi" + 
                            " from p1_mgr mr" + 
                            " inner join p1_memb m on mr.mrno = m.mno" +
                            " where m.mno=" + no);

            if (rs.next()) {
                Manager mgr = new Manager();
                mgr.setNo(rs.getInt("mno"));
                mgr.setEmail(rs.getString("email"));
                mgr.setName(rs.getString("name"));
                mgr.setTel(rs.getString("tel"));
                mgr.setPosition(rs.getString("posi"));

                return mgr;
            }
            return null;

        } catch (Exception e) {
            throw new DaoException(e);

        } finally {
            try {rs.close();} catch (Exception e) {}
            try {stmt.close();} catch (Exception e) {}
        }
    }

    public int delete(int no) {
        Connection con = null;
        Statement stmt = null;

        try {
            
            con = datasource.getConnection();

            con.setAutoCommit(false);
            stmt = con.createStatement();

            String sql = "delete from p1_mgr where mrno=" + no ;
            int count = stmt.executeUpdate(sql);

            if (count == 0)
                return 0;

            String sql2 = "delete from p1_memb where mno=" + no;
            stmt.executeUpdate(sql2);
            con.commit();

            return 1;

        } catch (Exception e) {
            try {con.rollback();} catch(Exception e2) {}
            throw new DaoException(e);

        } finally {
            try {stmt.close();} catch (Exception e) {}
           
        }
    }

    //    public static void main(String [] args) {
    //        ManagerMysqlDao dao = new ManagerMysqlDao();
    //        long start, end;
    //        
    //        start = System.currentTimeMillis(); // 1970년 0시 0분 0초를 기준
    //        for(int i=0; i<100; i++) {
    //            dao.findAll();
    //        }
    //        end = System.currentTimeMillis();
    //        System.out.println(end - start); // 커넥션 매번 결합시 162
    //        
    //        start = System.currentTimeMillis(); // 1970년 0시 0분 0초를 기준
    //        for(int i=0; i<100; i++) {
    //            dao.findAll2();
    //        }
    //        end = System.currentTimeMillis();
    //        System.out.println(end - start); // 커넥션 한번 결합시 14 
    //    }
}









